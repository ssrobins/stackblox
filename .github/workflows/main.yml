name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      include_check:
        description: 'Include check'
        type: boolean
      publish:
        description: 'Publish'
        type: boolean

env:
  CONAN_REVISIONS_ENABLED: 1
  app_name: StackBlox

jobs:
  builds:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: androidarm
            os: ubuntu-20.04
            build_script: ./cmake.py androidarm --build --package
            artifact_path: build_androidarm/_package/*.apk
            clang_version: 12
          - name: androidarm64
            os: ubuntu-20.04
            build_script: ./cmake.py androidarm64 --build --package
            artifact_path: build_androidarm64/_package/*.apk
            clang_version: 12
          - name: ios
            os: macos-12
            build_script: ./cmake.py ios --build --package
            artifact_path: build_ios/_package/*.ipa
            clang_version: 13
          - name: linux
            os: ubuntu-18.04
            build_script: ./cmake.py linux --build --test --package
            artifact_path: build_linux/_package/*.tar.gz
          - name: macos
            os: macos-12
            build_script: ./cmake.py macos --build --test --package
            artifact_path: build_macos/_package/*.zip
            clang_version: 13
          - name:  windows
            os: windows-2022
            build_script: py cmake.py windows --build --test --package
            artifact_path: build_windows/_package/*.zip
    steps:
      - uses: actions/checkout@v2
        with:
          lfs: 'true'

      - name: Print environment variables
        run: env

      - name: Check formatting
        if: contains(matrix.name, 'android')
        run: |
          clang-format --version
          find . -iname "*.cpp" -or -iname "*.h" | xargs clang-format --dry-run --Werror

      - name: Install Android key store
        if: contains(matrix.name, 'android')
        run: |
          key_store_path=$HOME/android.jks
          gradle_config_dir=$HOME/.gradle
          gradle_properties=$gradle_config_dir/gradle.properties
          echo "GRADLE_USER_HOME=$gradle_config_dir" >> $GITHUB_ENV
          echo "${{ secrets.ANDROID_KEY_STORE }}" | base64 --decode > $key_store_path
          mkdir $gradle_config_dir
          echo ANDROID_KEY_STORE_PATH=$key_store_path >> $gradle_properties
          echo ANDROID_KEY_STORE_PASSWORD=${{ secrets.ANDROID_KEY_STORE_PASSWORD }} >> $gradle_properties
          echo ANDROID_KEY_ALIAS=androidUploadKey >> $gradle_properties
          echo ANDROID_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }} >> $gradle_properties

      - name: 'Download development provisioning profile'
        if: matrix.name == 'ios'
        uses: apple-actions/download-provisioning-profiles@v1
        with:
          bundle-id: '*'
          profile-type: 'IOS_APP_DEVELOPMENT'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: 'Download App Store provisioning profile'
        if: matrix.name == 'ios'
        uses: apple-actions/download-provisioning-profiles@v1
        with:
          bundle-id: 'com.dnqpy.${{ env.app_name }}'
          profile-type: 'IOS_APP_STORE'
          issuer-id: ${{ secrets.APPSTORE_ISSUER_ID }}
          api-key-id: ${{ secrets.APPSTORE_KEY_ID }}
          api-private-key: ${{ secrets.APPSTORE_PRIVATE_KEY }}

      - name: Import Code-Signing Certificates
        if: matrix.name == 'ios' || matrix.name == 'macos'
        uses: apple-actions/import-codesign-certs@v1
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATES }}
          p12-password: ${{ secrets.APPLE_CERTIFICATES_PASSWORD }}

      - name: Install required Linux packages
        if: contains(matrix.name, 'android') || matrix.name == 'linux'
        run: sudo apt-get install cppcheck ninja-build python3-setuptools -y

      - name: Install required macOS packages
        if: matrix.name == 'ios' || matrix.name == 'macos'
        run: brew install cppcheck

      - name: Install CMake
        uses: ssrobins/install-cmake@main

      - name: Install Conan
        run: pip3 install conan --pre --upgrade

      - name: Print versions
        run: |
          cmake --version
          conan --version

      - name: Set Android NDK
        if: contains(matrix.name, 'android')
        run: echo "ANDROID_NDK_ROOT=$ANDROID_HOME/ndk/23.2.8568313" >> $GITHUB_ENV

      - name: Build
        if: github.event.inputs.include_check != 'true'
        run: ${{ matrix.build_script }} --noConanPkgBuild --config Release
        env:
          DEVELOPER_DIR: /Applications/Xcode_13.4.1.app/Contents/Developer

      - name: Run Cppcheck
        if: matrix.name != 'windows'
        run: |
          cppcheck --version
          cppcheck . --force --error-exitcode=1

      - name: Install 'Include What You Use'
        if: matrix.clang_version && github.event.inputs.include_check == 'true'
        uses: ssrobins/install-include-what-you-use@main
        with:
          clang_version: ${{ matrix.clang_version }}

      - name: Check includes
        if: matrix.clang_version && github.event.inputs.include_check == 'true'
        run: ./cmake.py ${{ matrix.name }} --iwyu

      - uses: actions/upload-artifact@v2
        if: github.event.inputs.include_check != 'true'
        with:
          name: ${{ env.app_name }}_artifact${{ github.run_number }}
          path: ${{ matrix.artifact_path }}
          if-no-files-found: error

      - name: 'Publish to App Store'
        if: matrix.name == 'ios' && github.event.inputs.publish == 'true' && github.event.inputs.include_check != 'true'
        run: xcrun altool --upload-app --file $(find . -name *.ipa | head -n 1) --type ios --username ssrobins@gmail.com --password ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
